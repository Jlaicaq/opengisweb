// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.opengis.gvnix;

import java.lang.String;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.opengis.gvnix.Usuario;
import org.opengis.gvnix.enumerated.TipoUser;

privileged aspect Usuario_Roo_Finder {
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByApellidosLike(String Apellidos) {
        if (Apellidos == null || Apellidos.length() == 0) throw new IllegalArgumentException("The Apellidos argument is required");
        Apellidos = Apellidos.replace('*', '%');
        if (Apellidos.charAt(0) != '%') {
            Apellidos = "%" + Apellidos;
        }
        if (Apellidos.charAt(Apellidos.length() - 1) != '%') {
            Apellidos = Apellidos + "%";
        }
        EntityManager em = Usuario.entityManager();
        TypedQuery<Usuario> q = em.createQuery("SELECT o FROM Usuario AS o WHERE LOWER(o.Apellidos) LIKE LOWER(:Apellidos)", Usuario.class);
        q.setParameter("Apellidos", Apellidos);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByDniLike(String Dni) {
        if (Dni == null || Dni.length() == 0) throw new IllegalArgumentException("The Dni argument is required");
        Dni = Dni.replace('*', '%');
        if (Dni.charAt(0) != '%') {
            Dni = "%" + Dni;
        }
        if (Dni.charAt(Dni.length() - 1) != '%') {
            Dni = Dni + "%";
        }
        EntityManager em = Usuario.entityManager();
        TypedQuery<Usuario> q = em.createQuery("SELECT o FROM Usuario AS o WHERE LOWER(o.Dni) LIKE LOWER(:Dni)", Usuario.class);
        q.setParameter("Dni", Dni);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByEmailLike(String Email) {
        if (Email == null || Email.length() == 0) throw new IllegalArgumentException("The Email argument is required");
        Email = Email.replace('*', '%');
        if (Email.charAt(0) != '%') {
            Email = "%" + Email;
        }
        if (Email.charAt(Email.length() - 1) != '%') {
            Email = Email + "%";
        }
        EntityManager em = Usuario.entityManager();
        TypedQuery<Usuario> q = em.createQuery("SELECT o FROM Usuario AS o WHERE LOWER(o.Email) LIKE LOWER(:Email)", Usuario.class);
        q.setParameter("Email", Email);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByNombreLike(String Nombre) {
        if (Nombre == null || Nombre.length() == 0) throw new IllegalArgumentException("The Nombre argument is required");
        Nombre = Nombre.replace('*', '%');
        if (Nombre.charAt(0) != '%') {
            Nombre = "%" + Nombre;
        }
        if (Nombre.charAt(Nombre.length() - 1) != '%') {
            Nombre = Nombre + "%";
        }
        EntityManager em = Usuario.entityManager();
        TypedQuery<Usuario> q = em.createQuery("SELECT o FROM Usuario AS o WHERE LOWER(o.Nombre) LIKE LOWER(:Nombre)", Usuario.class);
        q.setParameter("Nombre", Nombre);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByTelefono(int Telefono) {
        EntityManager em = Usuario.entityManager();
        TypedQuery<Usuario> q = em.createQuery("SELECT o FROM Usuario AS o WHERE o.Telefono = :Telefono", Usuario.class);
        q.setParameter("Telefono", Telefono);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByTipo(TipoUser Tipo) {
        if (Tipo == null) throw new IllegalArgumentException("The Tipo argument is required");
        EntityManager em = Usuario.entityManager();
        TypedQuery<Usuario> q = em.createQuery("SELECT o FROM Usuario AS o WHERE o.Tipo = :Tipo", Usuario.class);
        q.setParameter("Tipo", Tipo);
        return q;
    }
    
}
